// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	rsa "crypto/rsa"

	mock "github.com/stretchr/testify/mock"
)

// RSAKey is an autogenerated mock type for the RSAKey type
type RSAKey struct {
	mock.Mock
}

// PrivateKey provides a mock function with given fields:
func (_m *RSAKey) PrivateKey() *rsa.PrivateKey {
	ret := _m.Called()

	var r0 *rsa.PrivateKey
	if rf, ok := ret.Get(0).(func() *rsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *RSAKey) PublicKey() *rsa.PublicKey {
	ret := _m.Called()

	var r0 *rsa.PublicKey
	if rf, ok := ret.Get(0).(func() *rsa.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}

	return r0
}

type mockConstructorTestingTNewRSAKey interface {
	mock.TestingT
	Cleanup(func())
}

// NewRSAKey creates a new instance of RSAKey. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRSAKey(t mockConstructorTestingTNewRSAKey) *RSAKey {
	mock := &RSAKey{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
