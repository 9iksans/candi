package main

import (
	"bufio"
	"bytes"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"text/template"
)

func parseInput() (scope string, headerConfig configHeader, srvConfig serviceConfig, modConfigs []moduleConfig, baseConfig config) {

	reader := bufio.NewReader(os.Stdin)

	var cmdInput string
	if scopeFlag == "" {
		fmt.Println("\033[1mWhat do you want?\n" +
			"1) Init service\n" +
			"2) Add module(s)\033[0m")
		cmdInput, _ := reader.ReadString('\n')
		cmdInput = strings.TrimRight(cmdInput, "\n")
		scopeFlag = cmdInput
	}

	var ok bool
	scope, ok = scopeMap[scopeFlag]
	if !ok {
		log.Fatal("invalid option")
	}

	if scope == initService {
		fmt.Print(ps1 + "\033[1mPlease input service name:\033[0m ")
		cmdInput, _ := reader.ReadString('\n')
		headerConfig.ServiceName = strings.TrimRight(cmdInput, "\n")
		if strings.TrimSpace(headerConfig.ServiceName) == "" {
			log.Fatal("service name cannot empty")
		}
	} else if scope == addModule && serviceNameFlag != "" {
		headerConfig.ServiceName = serviceNameFlag
	}

	fmt.Print(ps1 + "\033[1mPlease input module names (separated by comma):\033[0m ")
	cmdInput, _ = reader.ReadString('\n')
	cmdInput = strings.TrimRight(cmdInput, "\n")
	if strings.TrimSpace(cmdInput) == "" {
		log.Fatal("modules cannot empty")
	}
	for _, moduleName := range strings.Split(cmdInput, ",") {
		modConfigs = append(modConfigs, moduleConfig{
			ModuleName: strings.TrimSpace(moduleName), Skip: false,
		})
	}

	fmt.Print(ps1 + "\033[1mPlease select service handlers (separated by comma)\n" +
		"1) Rest API\n" +
		"2) GRPC\n" +
		"3) GraphQL\033[0m\n")
	cmdInput, _ = reader.ReadString('\n')
	cmdInput = strings.TrimRight(cmdInput, "\n")
	serviceHandlers := make(map[string]bool)
	for _, str := range strings.Split(strings.Trim(cmdInput, ","), ",") {
		if serverName, ok := serviceHandlersMap[strings.TrimSpace(str)]; ok {
			serviceHandlers[serverName] = true
		}
	}

	fmt.Print(ps1 + "\033[1mPlease select worker handlers (separated by comma)\n" +
		"1) Kafka Consumer\n" +
		"2) Scheduler\n" +
		"3) Redis Subscriber\n" +
		"4) Task Queue\033[0m\n")
	cmdInput, _ = reader.ReadString('\n')
	cmdInput = strings.TrimRight(cmdInput, "\n")
	workerHandlers := make(map[string]bool)
	for _, str := range strings.Split(strings.Trim(cmdInput, ","), ",") {
		if workerName, ok := workerHandlersMap[strings.TrimSpace(str)]; ok {
			workerHandlers[workerName] = true
		}
	}

	fmt.Print(ps1 + "\033[1mPlease select dependencies (separated by comma)\n" +
		"1) Kafka\n" +
		"2) Redis\n" +
		"3) SQL Database\n" +
		"4) Mongo Database\033[0m\n")
	cmdInput, _ = reader.ReadString('\n')
	cmdInput = strings.TrimRight(cmdInput, "\n")

	dependencies := make(map[string]bool)
	for _, str := range strings.Split(strings.Trim(cmdInput, ","), ",") {
		str = strings.TrimSpace(str)
		if depsName, ok := dependencyMap[str]; ok {
			dependencies[depsName] = true
		}
	}
	if dependencies[sqldbDeps] {
		fmt.Print(ps1 + "\033[1mPlease select SQL database driver\n" +
			"1) Postgres\n" +
			"2) MySQL\033[0m\n")
		cmdInput, _ = reader.ReadString('\n')
		cmdInput = strings.TrimRight(strings.TrimSpace(cmdInput), "\n")
		baseConfig.SQLDriver = sqlDrivers[cmdInput]
	}

	headerConfig.Header = fmt.Sprintf("Code generated by candi %s.", version)
	headerConfig.PackageName = packageName
	if gomodName != "" {
		gomodName = strings.TrimSuffix(gomodName, "/") + "/"
		headerConfig.GoModName = gomodName + headerConfig.ServiceName
	} else {
		headerConfig.GoModName = headerConfig.ServiceName
	}

	baseConfig.RestHandler = serviceHandlers[restHandler]
	baseConfig.GRPCHandler = serviceHandlers[grpcHandler]
	baseConfig.GraphQLHandler = serviceHandlers[graphqlHandler]
	baseConfig.KafkaHandler = workerHandlers[kafkaHandler]
	baseConfig.SchedulerHandler = workerHandlers[schedulerHandler]
	baseConfig.RedisSubsHandler = workerHandlers[redissubsHandler]
	baseConfig.TaskQueueHandler = workerHandlers[taskqueueHandler]
	baseConfig.KafkaDeps, baseConfig.RedisDeps = dependencies[kafkaDeps], dependencies[redisDeps]
	baseConfig.SQLDeps, baseConfig.MongoDeps = dependencies[sqldbDeps], dependencies[mongodbDeps]
	baseConfig.IsWorkerActive = baseConfig.KafkaHandler || baseConfig.SchedulerHandler || baseConfig.RedisSubsHandler || baseConfig.TaskQueueHandler

	return
}

func parseSharedRepository(data serviceConfig) (repos []FileStructure) {
	if data.SQLDeps {
		repos = append(repos, FileStructure{
			FromTemplate: true, DataSource: data, Source: templateRepositoryUOWSQL, FileName: "repository_sql.go",
		})
	}
	if data.MongoDeps {
		repos = append(repos, FileStructure{
			FromTemplate: true, DataSource: data, Source: templateRepositoryUOWMongo, FileName: "repository_mongo.go",
		})
	}
	return
}

func parseRepositoryModule(data moduleConfig) (repos []FileStructure) {
	if data.SQLDeps {
		repos = append(repos, FileStructure{
			FromTemplate: true, DataSource: data, Source: templateRepositorySQLImpl, FileName: "repository_sql.go",
		})
	}
	if data.MongoDeps {
		repos = append(repos, FileStructure{
			FromTemplate: true, DataSource: data, Source: templateRepositoryMongoImpl, FileName: "repository_mongo.go",
		})
	}
	return
}

func loadTemplate(source string, sourceData interface{}) []byte {
	var byteBuff = new(bytes.Buffer)
	defer byteBuff.Reset()

	tmpl, err := tpl.Funcs(formatTemplate()).Parse(source)
	if err != nil {
		panic(err)
	}

	if err := tmpl.Execute(byteBuff, sourceData); err != nil {
		panic(err)
	}

	return byteBuff.Bytes()
}

func formatTemplate() template.FuncMap {
	replacer := strings.NewReplacer("-", "", "*", "", "/", "", ":", "")
	return template.FuncMap{

		"clean": func(v string) string {
			return replacer.Replace(v)
		},
		"upper": func(str string) string {
			return strings.Title(str)
		},
		"isActive": func(str string) string {
			ok, _ := strconv.ParseBool(str)
			if ok {
				return ""
			}
			return "// "
		},
	}
}

func mergeMap(dest, source map[string]interface{}) {
	for k, v := range source {
		dest[k] = v
	}
}

func printBanner() {
	fmt.Printf(`
	 _____   ___   _   _______ _____ 
	/  __ \ / _ \ | \ | |  _  \_   _|
	| /  \// /_\ \|  \| | | | | | |  
	| |    |  _  || . | | | | | | |  
	| \__/\| | | || |\  | |/ / _| |_ 
	 \____/\_| |_/\_| \_/___/  \___/  %s

`, version)
}
