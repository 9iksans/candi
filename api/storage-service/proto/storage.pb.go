// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/proto/storage-service/upload.proto

package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Unknown StatusCode = 0
	StatusCode_Ok      StatusCode = 1
	StatusCode_Failed  StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}
var StatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_upload_e4759fc607103213, []int{0}
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	TotalSize            int64    `protobuf:"varint,2,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
	Received             int64    `protobuf:"varint,3,opt,name=Received,proto3" json:"Received,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_e4759fc607103213, []int{0}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (dst *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(dst, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *Chunk) GetReceived() int64 {
	if m != nil {
		return m.Received
	}
	return 0
}

type UploadStatus struct {
	Message              string     `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	File                 string     `protobuf:"bytes,2,opt,name=File,proto3" json:"File,omitempty"`
	Size                 int64      `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Code                 StatusCode `protobuf:"varint,4,opt,name=Code,proto3,enum=storage.StatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UploadStatus) Reset()         { *m = UploadStatus{} }
func (m *UploadStatus) String() string { return proto.CompactTextString(m) }
func (*UploadStatus) ProtoMessage()    {}
func (*UploadStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_e4759fc607103213, []int{1}
}
func (m *UploadStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadStatus.Unmarshal(m, b)
}
func (m *UploadStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadStatus.Marshal(b, m, deterministic)
}
func (dst *UploadStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadStatus.Merge(dst, src)
}
func (m *UploadStatus) XXX_Size() int {
	return xxx_messageInfo_UploadStatus.Size(m)
}
func (m *UploadStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UploadStatus proto.InternalMessageInfo

func (m *UploadStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadStatus) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *UploadStatus) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UploadStatus) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_Unknown
}

func init() {
	proto.RegisterType((*Chunk)(nil), "storage.Chunk")
	proto.RegisterType((*UploadStatus)(nil), "storage.UploadStatus")
	proto.RegisterEnum("storage.StatusCode", StatusCode_name, StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (StorageService_UploadClient, error)
}

type storageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageServiceClient(cc *grpc.ClientConn) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (StorageService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageService_serviceDesc.Streams[0], "/storage.StorageService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceUploadClient{stream}
	return x, nil
}

type StorageService_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type storageServiceUploadClient struct {
	grpc.ClientStream
}

func (x *storageServiceUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServiceServer is the server API for StorageService service.
type StorageServiceServer interface {
	Upload(StorageService_UploadServer) error
}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).Upload(&storageServiceUploadServer{stream})
}

type StorageService_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type storageServiceUploadServer struct {
	grpc.ServerStream
}

func (x *storageServiceUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _StorageService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/storage-service/upload.proto",
}

func init() {
	proto.RegisterFile("api/proto/storage-service/upload.proto", fileDescriptor_upload_e4759fc607103213)
}

var fileDescriptor_upload_e4759fc607103213 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x6b, 0xfa, 0x40,
	0x10, 0xc5, 0x5d, 0xf5, 0x1f, 0xff, 0x4e, 0x45, 0xc2, 0x94, 0x42, 0x90, 0x1e, 0x42, 0x0e, 0x6d,
	0x28, 0x98, 0x80, 0x7e, 0x84, 0x50, 0x6f, 0xa5, 0xb0, 0xa9, 0xa7, 0x9e, 0xb6, 0x66, 0xb0, 0x4b,
	0xc2, 0x6e, 0x48, 0x36, 0x96, 0xf6, 0xd3, 0x97, 0xec, 0x6a, 0xec, 0x6d, 0xde, 0xbc, 0xe5, 0xfd,
	0x76, 0x1e, 0x3c, 0x88, 0x5a, 0xa6, 0x75, 0xa3, 0x8d, 0x4e, 0x5b, 0xa3, 0x1b, 0x71, 0xa4, 0x75,
	0x4b, 0xcd, 0x49, 0x1e, 0x28, 0xed, 0xea, 0x4a, 0x8b, 0x22, 0xb1, 0x26, 0xce, 0xce, 0x6e, 0xf4,
	0x0e, 0xff, 0xb2, 0xcf, 0x4e, 0x95, 0x18, 0xc0, 0x2c, 0xd3, 0xca, 0x90, 0x32, 0x01, 0x0b, 0x59,
	0xbc, 0xe0, 0x17, 0x89, 0xf7, 0x30, 0x7f, 0xd3, 0x46, 0x54, 0xb9, 0xfc, 0xa1, 0x60, 0x1c, 0xb2,
	0x78, 0xc2, 0xaf, 0x0b, 0x5c, 0xc1, 0x7f, 0x4e, 0x07, 0x92, 0x27, 0x2a, 0x82, 0x89, 0x35, 0x07,
	0x1d, 0x7d, 0xc3, 0x62, 0x6f, 0xa9, 0xb9, 0x11, 0xa6, 0x6b, 0x7b, 0xc6, 0x0b, 0xb5, 0xad, 0x38,
	0x92, 0x65, 0xcc, 0xf9, 0x45, 0x22, 0xc2, 0x74, 0x27, 0x2b, 0x17, 0x3f, 0xe7, 0x76, 0xee, 0x77,
	0x16, 0xe9, 0x52, 0xed, 0x8c, 0x8f, 0x30, 0xcd, 0x74, 0x41, 0xc1, 0x34, 0x64, 0xf1, 0x72, 0x73,
	0x9b, 0x9c, 0xcf, 0x48, 0x1c, 0xa0, 0xb7, 0xb8, 0x7d, 0xf0, 0xb4, 0x06, 0xb8, 0xee, 0xf0, 0x06,
	0x66, 0x7b, 0x55, 0x2a, 0xfd, 0xa5, 0xfc, 0x11, 0x7a, 0x30, 0x7e, 0x2d, 0x7d, 0x86, 0x00, 0xde,
	0x4e, 0xc8, 0x8a, 0x0a, 0x7f, 0xbc, 0x79, 0x86, 0x65, 0xee, 0xa2, 0x72, 0x57, 0x17, 0x6e, 0xc1,
	0x73, 0x7f, 0xc7, 0xe5, 0x40, 0xb1, 0x4d, 0xad, 0xee, 0x06, 0xfd, 0xf7, 0xb8, 0x68, 0x14, 0xb3,
	0x0f, 0xcf, 0xb6, 0xbb, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x71, 0xf2, 0x4c, 0x87, 0x01,
	0x00, 0x00,
}
